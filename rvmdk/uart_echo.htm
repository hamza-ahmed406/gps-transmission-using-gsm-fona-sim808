<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\uart_echo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\uart_echo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Sep 08 21:41:35 2016
<BR><P>
<H3>Maximum Stack Usage =        736 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; GPSWork &rArr; GPSGetData &rArr; GPSSendInf &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[21]">Reset_Handler</a>
 <LI><a href="#[c]">NmiSR</a>
 <LI><a href="#[d]">FaultISR</a>
 <LI><a href="#[e]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a0]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">UARTCharPut</a><BR>
 <LI><a href="#[70]">waitAndCheckResp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">waitAndCheckResp</a><BR>
 <LI><a href="#[115]">sendDataCommands</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">sendDataCommands</a><BR>
 <LI><a href="#[c]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NmiSR</a><BR>
 <LI><a href="#[d]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">FaultISR</a><BR>
 <LI><a href="#[e]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">CFAL96x64x16ColorTranslate</a> from cfal96x64x16.o(i.CFAL96x64x16ColorTranslate) referenced from cfal96x64x16.o(.constdata)
 <LI><a href="#[1f]">CFAL96x64x16Flush</a> from cfal96x64x16.o(i.CFAL96x64x16Flush) referenced from cfal96x64x16.o(.constdata)
 <LI><a href="#[1b]">CFAL96x64x16LineDrawH</a> from cfal96x64x16.o(i.CFAL96x64x16LineDrawH) referenced from cfal96x64x16.o(.constdata)
 <LI><a href="#[1c]">CFAL96x64x16LineDrawV</a> from cfal96x64x16.o(i.CFAL96x64x16LineDrawV) referenced from cfal96x64x16.o(.constdata)
 <LI><a href="#[19]">CFAL96x64x16PixelDraw</a> from cfal96x64x16.o(i.CFAL96x64x16PixelDraw) referenced from cfal96x64x16.o(.constdata)
 <LI><a href="#[1a]">CFAL96x64x16PixelDrawMultiple</a> from cfal96x64x16.o(i.CFAL96x64x16PixelDrawMultiple) referenced from cfal96x64x16.o(.constdata)
 <LI><a href="#[1d]">CFAL96x64x16RectFill</a> from cfal96x64x16.o(i.CFAL96x64x16RectFill) referenced from cfal96x64x16.o(.constdata)
 <LI><a href="#[9]">Cmd_cat</a> from sd_card.o(i.Cmd_cat) referenced 2 times from sd_card.o(.data)
 <LI><a href="#[7]">Cmd_cd</a> from sd_card.o(i.Cmd_cd) referenced 4 times from sd_card.o(.data)
 <LI><a href="#[5]">Cmd_help</a> from sd_card.o(i.Cmd_help) referenced 6 times from sd_card.o(.data)
 <LI><a href="#[6]">Cmd_ls</a> from sd_card.o(i.Cmd_ls) referenced 2 times from sd_card.o(.data)
 <LI><a href="#[8]">Cmd_pwd</a> from sd_card.o(i.Cmd_pwd) referenced 2 times from sd_card.o(.data)
 <LI><a href="#[a]">Cmd_return</a> from sd_card.o(i.Cmd_return) referenced 4 times from sd_card.o(.data)
 <LI><a href="#[1]">FatFsTickTimer</a> from sd_card.o(i.FatFsTickTimer) referenced 2 times from main.o(.data)
 <LI><a href="#[d]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[17]">GrDefaultStringRenderer</a> from string.o(i.GrDefaultStringRenderer) referenced from context.o(i.GrContextInit)
 <LI><a href="#[20]">GrMapISO8859_1_Unicode</a> from charmap.o(i.GrMapISO8859_1_Unicode) referenced 2 times from context.o(.constdata)
 <LI><a href="#[e]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 108 times from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[13]">PortHIntHandler</a> from gsm_fona808.o(i.PortHIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[21]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">SchedulerSysTickIntHandler</a> from scheduler.o(i.SchedulerSysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">UART0IntHandler</a> from uartconfiguration.o(i.UART0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[11]">UART1IntHandler</a> from uartconfiguration.o(i.UART1IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[14]">WTimer0IntHandler</a> from main.o(i.WTimer0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[15]">WTimer1IntHandler</a> from gsm_fona808.o(i.WTimer1IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">WatchdogIntHandler</a> from main.o(i.WatchdogIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[18]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[2]">buttonHandler</a> from main.o(i.buttonHandler) referenced 2 times from main.o(.data)
 <LI><a href="#[4]">dispUpdate</a> from main.o(i.dispUpdate) referenced 2 times from main.o(.data)
 <LI><a href="#[3]">flagsSet</a> from main.o(i.flagsSet) referenced 2 times from main.o(.data)
 <LI><a href="#[16]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[11c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[120]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[121]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[25]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataMsg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeMessage
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSGetData
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[53]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cd
</UL>

<P><STRONG><a name="[4d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[4c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdLineProcess
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[4f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDataGPS
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[2b]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[2d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMFunc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLat
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLat
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[129]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[12a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2c]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[12c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[12d]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[32]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3f]"></a>_strtoull</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>

<P><STRONG><a name="[41]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[12f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>ButtonsInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, buttons.o(i.ButtonsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ButtonsInit &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>ButtonsPoll</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, buttons.o(i.ButtonsPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ButtonsPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonHandler
</UL>

<P><STRONG><a name="[48]"></a>CFAL96x64x16Init</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, cfal96x64x16.o(i.CFAL96x64x16Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CFAL96x64x16Init &rArr; CFAL96x64x16RectFill &rArr; CFAL96x64x16LineDrawH &rArr; CFAL96x64x16WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteCommand
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16RectFill
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
</UL>

<P><STRONG><a name="[4b]"></a>CmdLineProcess</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cmdline.o(i.CmdLineProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdLineProcess &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdCard
</UL>

<P><STRONG><a name="[9]"></a>Cmd_cat</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sd_card.o(i.Cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Cmd_cat &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_card.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Cmd_cd</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, sd_card.o(i.Cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Cmd_cd &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_card.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Cmd_help</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd_card.o(i.Cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmd_help &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_card.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Cmd_ls</STRONG> (Thumb, 336 bytes, Stack size 328 bytes, sd_card.o(i.Cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Cmd_ls &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_card.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Cmd_pwd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sd_card.o(i.Cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmd_pwd &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_card.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Cmd_return</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sd_card.o(i.Cmd_return))
<BR>[Address Reference Count : 1]<UL><LI> sd_card.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>FatFsTickTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sd_card.o(i.FatFsTickTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FatFsTickTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_timerproc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsInit
</UL>

<P><STRONG><a name="[92]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortHIntHandler
</UL>

<P><STRONG><a name="[90]"></a>GPIOIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PortH
</UL>

<P><STRONG><a name="[8f]"></a>GPIOIntTypeSet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PortH
</UL>

<P><STRONG><a name="[45]"></a>GPIOPadConfigSet</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsInit
</UL>

<P><STRONG><a name="[46]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsPoll
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsInit
</UL>

<P><STRONG><a name="[58]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PortH
</UL>

<P><STRONG><a name="[59]"></a>GPSFix</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, gps_fona.o(i.GPSFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GPSFix &rArr; GPSPower &rArr; GPSPowerOneTry &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPower
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPSFix
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
</UL>

<P><STRONG><a name="[60]"></a>GPSGetData</STRONG> (Thumb, 118 bytes, Stack size 400 bytes, gps_fona.o(i.GPSGetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GPSGetData &rArr; GPSSendInf &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDataGPS
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuseDataGPS
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
</UL>

<P><STRONG><a name="[66]"></a>GPSParseLat</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, gps_fona.o(i.GPSParseLat))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GPSParseLat &rArr; float2str &rArr; truncate &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string2float
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDataGPS
</UL>

<P><STRONG><a name="[6b]"></a>GPSParseLong</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, gps_fona.o(i.GPSParseLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GPSParseLong &rArr; float2str &rArr; truncate &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string2float
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDataGPS
</UL>

<P><STRONG><a name="[6c]"></a>GPSParseSpeed</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, gps_fona.o(i.GPSParseSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPSParseSpeed &rArr; ustrtof
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrtof
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDataGPS
</UL>

<P><STRONG><a name="[5c]"></a>GPSPower</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gps_fona.o(i.GPSPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GPSPower &rArr; GPSPowerOneTry &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPowerOneTry
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSFix
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
</UL>

<P><STRONG><a name="[6f]"></a>GPSPowerOneTry</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gps_fona.o(i.GPSPowerOneTry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GPSPowerOneTry &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPower
</UL>

<P><STRONG><a name="[62]"></a>GPSSendInf</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, gps_fona.o(i.GPSSendInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GPSSendInf &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSGetData
</UL>

<P><STRONG><a name="[73]"></a>GPSWork</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(i.GPSWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = GPSWork &rArr; GPSGetData &rArr; GPSSendInf &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPower
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSGetData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSFix
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeMessage
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeDataMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>GSMFullFunc</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, gsm_fona808.o(i.GSMFullFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GSMFullFunc &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
</UL>

<P><STRONG><a name="[79]"></a>GSMMinFunc</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, gsm_fona808.o(i.GSMMinFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GSMMinFunc &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
</UL>

<P><STRONG><a name="[7a]"></a>GSMNetworkReg</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gsm_fona808.o(i.GSMNetworkReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GSMNetworkReg &rArr; getGSMNetworkReg &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
</UL>

<P><STRONG><a name="[7c]"></a>GSMSignalQlty</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gsm_fona808.o(i.GSMSignalQlty))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GSMSignalQlty &rArr; getGSMSignalQlty &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
</UL>

<P><STRONG><a name="[72]"></a>GSMTimerDisable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gsm_fona808.o(i.GSMTimerDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSMTimerDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataMsg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimCardDetect
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSignalQlty
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMNetworkReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
</UL>

<P><STRONG><a name="[5a]"></a>GSMTimerEnable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gsm_fona808.o(i.GSMTimerEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GSMTimerEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataMsg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimCardDetect
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSignalQlty
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMNetworkReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPower
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSFix
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
</UL>

<P><STRONG><a name="[7e]"></a>GSMWork</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, main.o(i.GSMWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = GSMWork &rArr; sendDataMsg &rArr; sendDataCommands &rArr;  sendDataCommands (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataMsg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimCardDetect
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSignalQlty
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMNetworkReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>GrContextFontSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, string.o(i.GrContextFontSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrContextFontSet &rArr; UpdateContextCharMapping
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateContextCharMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispTitle
</UL>

<P><STRONG><a name="[fe]"></a>GrContextInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, context.o(i.GrContextInit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
</UL>

<P><STRONG><a name="[17]"></a>GrDefaultStringRenderer</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, string.o(i.GrDefaultStringRenderer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GrDefaultStringRenderer &rArr; GrFontGlyphRender
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontGlyphRender
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontGlyphDataGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> context.o(i.GrContextInit)
</UL>
<P><STRONG><a name="[fb]"></a>GrFontBaselineGet</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, string.o(i.GrFontBaselineGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GrFontBaselineGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispTitle
</UL>

<P><STRONG><a name="[84]"></a>GrFontGlyphDataGet</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, string.o(i.GrFontGlyphDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrFontGlyphDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDefaultStringRenderer
</UL>

<P><STRONG><a name="[85]"></a>GrFontGlyphRender</STRONG> (Thumb, 646 bytes, Stack size 64 bytes, string.o(i.GrFontGlyphRender))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GrFontGlyphRender
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDefaultStringRenderer
</UL>

<P><STRONG><a name="[86]"></a>GrImageDraw</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, image.o(i.GrImageDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GrImageDraw &rArr; InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalImageDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
</UL>

<P><STRONG><a name="[20]"></a>GrMapISO8859_1_Unicode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, charmap.o(i.GrMapISO8859_1_Unicode))
<BR>[Address Reference Count : 1]<UL><LI> context.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>GrRectFill</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rectangle.o(i.GrRectFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GrRectFill
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispTitle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispClear
</UL>

<P><STRONG><a name="[fc]"></a>GrStringDraw</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, string.o(i.GrStringDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrStringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispTitle
</UL>

<P><STRONG><a name="[88]"></a>GrStringWidthGet</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, string.o(i.GrStringWidthGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GrStringWidthGet &rArr; GrFontGlyphDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontGlyphDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispTitle
</UL>

<P><STRONG><a name="[c4]"></a>HibernateClockConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hibernate.o(i.HibernateClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c7]"></a>HibernateDataSet</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, hibernate.o(i.HibernateDataSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HibernateDataSet
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c3]"></a>HibernateEnableExpClk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hibernate.o(i.HibernateEnableExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c2]"></a>HibernateIntClear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hibernate.o(i.HibernateIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c1]"></a>HibernateIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hibernate.o(i.HibernateIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c0]"></a>HibernateIsActive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hibernate.o(i.HibernateIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c5]"></a>HibernateRTCEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hibernate.o(i.HibernateRTCEnable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[ca]"></a>HibernateRTCGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hibernate.o(i.HibernateRTCGet))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[cb]"></a>HibernateRTCMatchSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hibernate.o(i.HibernateRTCMatchSet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c6]"></a>HibernateRTCSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hibernate.o(i.HibernateRTCSet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c9]"></a>HibernateRTCTrimSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hibernate.o(i.HibernateRTCTrimSet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[c8]"></a>HibernateWakeSet</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hibernate.o(i.HibernateWakeSet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[89]"></a>Init_GSM</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, gsm_fona808.o(i.Init_GSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Init_GSM &rArr; getGSMSignalQlty &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simCardDetectOneTry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGSMOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMFunc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimerGSM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PortH
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>Init_PortH</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gsm_fona808.o(i.Init_PortH))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_PortH &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
</UL>

<P><STRONG><a name="[13]"></a>PortHIntHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gsm_fona808.o(i.PortHIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PortHIntHandler &rArr; UARTSend &rArr; writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SchedulerElapsedTicksCalc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scheduler.o(i.SchedulerElapsedTicksCalc))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerElapsedTicksGet
</UL>

<P><STRONG><a name="[93]"></a>SchedulerElapsedTicksGet</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, scheduler.o(i.SchedulerElapsedTicksGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SchedulerElapsedTicksGet
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerElapsedTicksCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerRun
</UL>

<P><STRONG><a name="[95]"></a>SchedulerInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scheduler.o(i.SchedulerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SchedulerInit &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>SchedulerRun</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, scheduler.o(i.SchedulerRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SchedulerRun &rArr; SchedulerElapsedTicksGet
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerElapsedTicksGet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerSysTickIntHandler
</UL>

<P><STRONG><a name="[f]"></a>SchedulerSysTickIntHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, scheduler.o(i.SchedulerSysTickIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SchedulerSysTickIntHandler &rArr; SchedulerRun &rArr; SchedulerElapsedTicksGet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SimCardDetect</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gsm_fona808.o(i.SimCardDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SimCardDetect &rArr; simCardDetectOneTry &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simCardDetectOneTry
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
</UL>

<P><STRONG><a name="[113]"></a>StringFromFResult</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sd_card.o(i.StringFromFResult))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdCard
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>

<P><STRONG><a name="[96]"></a>SysCtlClockGet</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[43]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
</UL>

<P><STRONG><a name="[98]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
</UL>

<P><STRONG><a name="[99]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
</UL>

<P><STRONG><a name="[97]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
</UL>

<P><STRONG><a name="[10e]"></a>SysTick_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systick.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>SysTick_Wait</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.SysTick_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_us
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>

<P><STRONG><a name="[5f]"></a>SysTick_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, systick.o(i.SysTick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_delay_ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForUART1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataMsg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimCardDetect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSignalQlty
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMNetworkReg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPower
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSFix
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortHIntHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
</UL>

<P><STRONG><a name="[9c]"></a>SysTick_delay_us</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, systick.o(i.SysTick_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_delay_us &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntHandler
</UL>

<P><STRONG><a name="[cc]"></a>TimerClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.TimerClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configTimerGSM
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configWtimer
</UL>

<P><STRONG><a name="[d2]"></a>TimerLoadSet64</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet64))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configWtimer
</UL>

<P><STRONG><a name="[10]"></a>UART0IntHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, uartconfiguration.o(i.UART0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UART0IntHandler &rArr; responseRead &rArr; writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdCard
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrcmp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1IntHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, uartconfiguration.o(i.UART1IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[a1]"></a>UARTCharsAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[cf]"></a>UARTFIFOEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTFIFOEnable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configUART
</UL>

<P><STRONG><a name="[d0]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTFIFOLevelSet))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configUART
</UL>

<P><STRONG><a name="[9f]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
</UL>

<P><STRONG><a name="[5e]"></a>UARTSend</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uartconfiguration.o(i.UARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UARTSend &rArr; writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToFile
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simCardDetectOneTry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGSMOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimCardDetect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPower
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSFix
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeMessage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTimer1IntHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTimer0IntHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortHIntHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPSFix
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPowerOneTry
</UL>

<P><STRONG><a name="[ce]"></a>UARTStdioConfig</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configUART
</UL>

<P><STRONG><a name="[a3]"></a>UARTgets</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uartstdio.o(i.UARTgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTgets &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdCard
</UL>

<P><STRONG><a name="[4e]"></a>UARTprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, uartstdio.o(i.UARTprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdCard
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simCardDetectOneTry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGSMOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPSFix
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPowerOneTry
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFile
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_pwd
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_ls
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_help
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[a5]"></a>UARTvprintf</STRONG> (Thumb, 574 bytes, Stack size 64 bytes, uartstdio.o(i.UARTvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>

<P><STRONG><a name="[a4]"></a>UARTwrite</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTvprintf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
</UL>

<P><STRONG><a name="[a6]"></a>URCfound</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gsm_fona808.o(i.URCfound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = URCfound &rArr; ustrstr &rArr; ustrncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
</UL>

<P><STRONG><a name="[14]"></a>WTimer0IntHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.WTimer0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WTimer0IntHandler &rArr; UARTSend &rArr; writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WTimer1IntHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gsm_fona808.o(i.WTimer1IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WTimer1IntHandler &rArr; UARTSend &rArr; writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WatchdogIntHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.WatchdogIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WatchdogIntHandler &rArr; SysTick_delay_us &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[131]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseSpeed
</UL>

<P><STRONG><a name="[132]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[133]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[134]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[a9]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate
</UL>

<P><STRONG><a name="[ab]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate
</UL>

<P><STRONG><a name="[135]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[136]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[137]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2]"></a>buttonHandler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(i.buttonHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = buttonHandler &rArr; dispUpdate &rArr; GrImageDraw &rArr; InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsPoll
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>closeFiles</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, sd_card.o(i.closeFiles))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = closeFiles &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[74]"></a>composeDataMsg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.composeDataMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = composeDataMsg &rArr; stringAppend
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
</UL>

<P><STRONG><a name="[75]"></a>composeMessage</STRONG> (Thumb, 326 bytes, Stack size 120 bytes, main.o(i.composeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = composeMessage &rArr; UARTSend &rArr; writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringAppend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
</UL>

<P><STRONG><a name="[bf]"></a>configHibernate</STRONG> (Thumb, 112 bytes, Stack size 272 bytes, main.o(i.configHibernate))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = configHibernate &rArr; SysTick_delay_ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWakeSet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRTCTrimSet
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRTCSet
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRTCMatchSet
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRTCGet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRTCEnable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateIsActive
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateIntStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateIntClear
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateEnableExpClk
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateDataSet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>configTimerGSM</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gsm_fona808.o(i.configTimerGSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = configTimerGSM
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockSourceSet
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
</UL>

<P><STRONG><a name="[cd]"></a>configUART</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, uartconfiguration.o(i.configUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = configUART &rArr; UARTStdioConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>configWatchDog</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.configWatchDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = configWatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>configWtimer</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, main.o(i.configWtimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = configWtimer
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet64
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerClockSourceSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>disk_initialize</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, mmc-dk-tm4c123g.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_initialize &rArr; power_on &rArr; send_initial_clock_train &rArr; DESELECT
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_speed
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[f1]"></a>disk_ioctl</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, mmc-dk-tm4c123g.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_ioctl &rArr; power_on &rArr; send_initial_clock_train &rArr; DESELECT
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_power
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[b1]"></a>disk_read</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mmc-dk-tm4c123g.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disk_read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd12
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[b3]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mmc-dk-tm4c123g.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[57]"></a>disk_timerproc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mmc-dk-tm4c123g.o(i.disk_timerproc))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFsTickTimer
</UL>

<P><STRONG><a name="[f6]"></a>disk_write</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mmc-dk-tm4c123g.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SELECT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[f8]"></a>dispClear</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, main.o(i.dispClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dispClear &rArr; GrRectFill
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrRectFill
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
</UL>

<P><STRONG><a name="[fa]"></a>dispTitle</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, main.o(i.dispTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dispTitle &rArr; GrStringWidthGet &rArr; GrFontGlyphDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrRectFill
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontBaselineGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextFontSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
</UL>

<P><STRONG><a name="[4]"></a>dispUpdate</STRONG> (Thumb, 3048 bytes, Stack size 40 bytes, main.o(i.dispUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dispUpdate &rArr; GrImageDraw &rArr; InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrImageDraw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontBaselineGet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispTitle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispClear
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[fd]"></a>displayInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.displayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = displayInit &rArr; CFAL96x64x16Init &rArr; CFAL96x64x16RectFill &rArr; CFAL96x64x16LineDrawH &rArr; CFAL96x64x16WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextInit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; power_on &rArr; send_initial_clock_train &rArr; DESELECT
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
</UL>

<P><STRONG><a name="[56]"></a>f_getfree</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_getfree &rArr; chk_mounted &rArr; check_fs &rArr; disk_read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_ls
</UL>

<P><STRONG><a name="[b6]"></a>f_lseek</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
</UL>

<P><STRONG><a name="[100]"></a>f_mkdir</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>

<P><STRONG><a name="[114]"></a>f_mount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>

<P><STRONG><a name="[51]"></a>f_open</STRONG> (Thumb, 350 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFile
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[54]"></a>f_opendir</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_ls
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cd
</UL>

<P><STRONG><a name="[52]"></a>f_read</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[55]"></a>f_readdir</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_ls
</UL>

<P><STRONG><a name="[b9]"></a>f_sync</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; power_on &rArr; send_initial_clock_train &rArr; DESELECT
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToFile
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[b8]"></a>f_write</STRONG> (Thumb, 522 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToFile
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
</UL>

<P><STRONG><a name="[d7]"></a>ff_convert</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, cc932.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[bc]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc932.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[3]"></a>flagsSet</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, main.o(i.flagsSet))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>float2str</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, strfunc.o(i.float2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = float2str &rArr; truncate &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncate
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLat
</UL>

<P><STRONG><a name="[63]"></a>fuseDataGPS</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gps_fona.o(i.fuseDataGPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fuseDataGPS
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSGetData
</UL>

<P><STRONG><a name="[e7]"></a>gen_numname</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[109]"></a>getBatstat</STRONG> (Thumb, 194 bytes, Stack size 120 bytes, gsm_fona808.o(i.getBatstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = getBatstat &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>getGPSFix</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gps_fona.o(i.getGPSFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = getGPSFix &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSFix
</UL>

<P><STRONG><a name="[8d]"></a>getGSMFunc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gsm_fona808.o(i.getGSMFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = getGSMFunc &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
</UL>

<P><STRONG><a name="[7b]"></a>getGSMNetworkReg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gsm_fona808.o(i.getGSMNetworkReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = getGSMNetworkReg &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMNetworkReg
</UL>

<P><STRONG><a name="[7d]"></a>getGSMSignalQlty</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gsm_fona808.o(i.getGSMSignalQlty))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = getGSMSignalQlty &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMSignalQlty
</UL>

<P><STRONG><a name="[10a]"></a>getTime</STRONG> (Thumb, 236 bytes, Stack size 136 bytes, main.o(i.getTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = getTime &rArr; usprintf &rArr; uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umktime
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulocaltime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringAppend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeInArray
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRTCGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>get_fat</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[101]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmc-dk-tm4c123g.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[8a]"></a>isGSMOn</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gsm_fona808.o(i.isGSMOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = isGSMOn &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
</UL>

<P><STRONG><a name="[77]"></a>logData</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sd_card.o(i.logData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = logData &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
</UL>

<P><STRONG><a name="[16]"></a>main</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = main &rArr; GPSWork &rArr; GPSGetData &rArr; GPSSendInf &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configUART
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchedulerInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configWtimer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configWatchDog
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configHibernate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[111]"></a>openFile</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sd_card.o(i.openFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = openFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>

<P><STRONG><a name="[64]"></a>parseDataGPS</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gps_fona.o(i.parseDataGPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = parseDataGPS &rArr; GPSParseLong &rArr; float2str &rArr; truncate &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLat
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSGetData
</UL>

<P><STRONG><a name="[d5]"></a>put_fat</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[10d]"></a>removeInArray</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, strfunc.o(i.removeInArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = removeInArray
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[65]"></a>responseRead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uartconfiguration.o(i.responseRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = responseRead &rArr; writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToFile
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simCardDetectOneTry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGSMOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSGetData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPSFix
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPowerOneTry
</UL>

<P><STRONG><a name="[9e]"></a>sdCard</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sd_card.o(i.sdCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sdCard &rArr; UARTprintf &rArr; UARTvprintf &rArr; UARTwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdLineProcess
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFResult
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[110]"></a>sdInit</STRONG> (Thumb, 554 bytes, Stack size 64 bytes, sd_card.o(i.sdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sdInit &rArr; openFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringAppend
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFile
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFResult
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>sendDataCommands</STRONG> (Thumb, 860 bytes, Stack size 24 bytes, gsm_fona808.o(i.sendDataCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = sendDataCommands &rArr;  sendDataCommands (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrcmp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataMsg
</UL>

<P><STRONG><a name="[81]"></a>sendDataMsg</STRONG> (Thumb, 270 bytes, Stack size 280 bytes, gsm_fona808.o(i.sendDataMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = sendDataMsg &rArr; sendDataCommands &rArr;  sendDataCommands (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringAppend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
</UL>

<P><STRONG><a name="[80]"></a>sendSMS</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, gsm_fona808.o(i.sendSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sendSMS &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMTimerDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringAppend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
</UL>

<P><STRONG><a name="[8e]"></a>simCardDetectOneTry</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gsm_fona808.o(i.simCardDetectOneTry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = simCardDetectOneTry &rArr; waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringLength
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimCardDetect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
</UL>

<P><STRONG><a name="[67]"></a>string2float</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, strfunc.o(i.string2float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = string2float
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLat
</UL>

<P><STRONG><a name="[bd]"></a>stringAppend</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, strfunc.o(i.stringAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stringAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataMsg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeMessage
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeDataMsg
</UL>

<P><STRONG><a name="[5d]"></a>stringLength</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strfunc.o(i.stringLength))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simCardDetectOneTry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGSMOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimCardDetect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPower
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSFix
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeMessage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTimer1IntHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTimer0IntHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortHIntHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPSFix
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPowerOneTry
</UL>

<P><STRONG><a name="[69]"></a>truncate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strfunc.o(i.truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = truncate &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float2str
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseLat
</UL>

<P><STRONG><a name="[10c]"></a>ulocaltime</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ustdlib.o(i.ulocaltime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ulocaltime
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umktime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[10b]"></a>umktime</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, ustdlib.o(i.umktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = umktime &rArr; ulocaltime
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulocaltime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucmptime
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[76]"></a>usprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ustdlib.o(i.usprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usprintf &rArr; uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispUpdate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;composeMessage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMWork
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSWork
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTimer0IntHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFile
</UL>

<P><STRONG><a name="[9d]"></a>ustrcmp</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ustdlib.o(i.ustrcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ustrcmp &rArr; ustrncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[b7]"></a>ustrlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ustdlib.o(i.ustrlen))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToFile
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeFiles
</UL>

<P><STRONG><a name="[119]"></a>ustrncmp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ustdlib.o(i.ustrncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ustrncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrcmp
</UL>

<P><STRONG><a name="[11a]"></a>ustrncpy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ustdlib.o(i.ustrncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ustrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[71]"></a>ustrstr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ustdlib.o(i.ustrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ustrstr &rArr; ustrncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrncmp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URCfound
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPSFix
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPowerOneTry
</UL>

<P><STRONG><a name="[6d]"></a>ustrtof</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, ustdlib.o(i.ustrtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ustrtof
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSParseSpeed
</UL>

<P><STRONG><a name="[118]"></a>uvsnprintf</STRONG> (Thumb, 694 bytes, Stack size 64 bytes, ustdlib.o(i.uvsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[70]"></a>waitAndCheckResp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gsm_fona808.o(i.waitAndCheckResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = waitAndCheckResp &rArr;  waitAndCheckResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrstr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForUART1
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URCfound
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simCardDetectOneTry
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDataCommands
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGSMOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMSignalQlty
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMNetworkReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGSMFunc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatstat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GSM
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMMinFunc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSMFullFunc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGPSFix
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSSendInf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSPowerOneTry
</UL>

<P><STRONG><a name="[11b]"></a>waitForUART1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gsm_fona808.o(i.waitForUART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = waitForUART1 &rArr; SysTick_delay_ms &rArr; SysTick_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitAndCheckResp
</UL>

<P><STRONG><a name="[a2]"></a>writeToFile</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd_card.o(i.writeToFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = writeToFile &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseRead
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1e]"></a>CFAL96x64x16ColorTranslate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cfal96x64x16.o(i.CFAL96x64x16ColorTranslate))
<BR>[Address Reference Count : 1]<UL><LI> cfal96x64x16.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>CFAL96x64x16Flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cfal96x64x16.o(i.CFAL96x64x16Flush))
<BR>[Address Reference Count : 1]<UL><LI> cfal96x64x16.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>CFAL96x64x16LineDrawH</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, cfal96x64x16.o(i.CFAL96x64x16LineDrawH))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CFAL96x64x16LineDrawH &rArr; CFAL96x64x16WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16RectFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfal96x64x16.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>CFAL96x64x16LineDrawV</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, cfal96x64x16.o(i.CFAL96x64x16LineDrawV))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CFAL96x64x16LineDrawV &rArr; CFAL96x64x16WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfal96x64x16.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>CFAL96x64x16PixelDraw</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, cfal96x64x16.o(i.CFAL96x64x16PixelDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CFAL96x64x16PixelDraw &rArr; CFAL96x64x16WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfal96x64x16.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>CFAL96x64x16PixelDrawMultiple</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, cfal96x64x16.o(i.CFAL96x64x16PixelDrawMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CFAL96x64x16PixelDrawMultiple &rArr; CFAL96x64x16WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfal96x64x16.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>CFAL96x64x16RectFill</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cfal96x64x16.o(i.CFAL96x64x16RectFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CFAL96x64x16RectFill &rArr; CFAL96x64x16LineDrawH &rArr; CFAL96x64x16WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16LineDrawH
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cfal96x64x16.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>CFAL96x64x16WriteCommand</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cfal96x64x16.o(i.CFAL96x64x16WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CFAL96x64x16WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16PixelDrawMultiple
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16PixelDraw
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16LineDrawV
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16LineDrawH
</UL>

<P><STRONG><a name="[4a]"></a>CFAL96x64x16WriteData</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cfal96x64x16.o(i.CFAL96x64x16WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CFAL96x64x16WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16PixelDrawMultiple
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16PixelDraw
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16LineDrawV
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFAL96x64x16LineDrawH
</UL>

<P><STRONG><a name="[c]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>ucmptime</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, ustdlib.o(i.ucmptime))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umktime
</UL>

<P><STRONG><a name="[ee]"></a>DESELECT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmc-dk-tm4c123g.o(i.DESELECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
</UL>

<P><STRONG><a name="[eb]"></a>SELECT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmc-dk-tm4c123g.o(i.SELECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[f2]"></a>chk_power</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc-dk-tm4c123g.o(i.chk_power))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[f0]"></a>power_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mmc-dk-tm4c123g.o(i.power_off))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[e9]"></a>power_on</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mmc-dk-tm4c123g.o(i.power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = power_on &rArr; send_initial_clock_train &rArr; DESELECT
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_initial_clock_train
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[f3]"></a>rcvr_datablock</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mmc-dk-tm4c123g.o(i.rcvr_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rcvr_datablock &rArr; rcvr_spi_m &rArr; rcvr_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi_m
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[ed]"></a>rcvr_spi</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mmc-dk-tm4c123g.o(i.rcvr_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd12
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi_m
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[112]"></a>rcvr_spi_m</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mmc-dk-tm4c123g.o(i.rcvr_spi_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcvr_spi_m &rArr; rcvr_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[ec]"></a>send_cmd</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mmc-dk-tm4c123g.o(i.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[f5]"></a>send_cmd12</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mmc-dk-tm4c123g.o(i.send_cmd12))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_cmd12 &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[ea]"></a>send_initial_clock_train</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mmc-dk-tm4c123g.o(i.send_initial_clock_train))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_initial_clock_train &rArr; DESELECT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DESELECT
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
</UL>

<P><STRONG><a name="[ef]"></a>set_max_speed</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mmc-dk-tm4c123g.o(i.set_max_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_max_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[f4]"></a>wait_ready</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mmc-dk-tm4c123g.o(i.wait_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_ready &rArr; rcvr_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[f7]"></a>xmit_datablock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mmc-dk-tm4c123g.o(i.xmit_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[116]"></a>xmit_spi</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mmc-dk-tm4c123g.o(i.xmit_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmit_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd12
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[b0]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_fs &rArr; disk_read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[d8]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[b2]"></a>chk_mounted</STRONG> (Thumb, 908 bytes, Stack size 80 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; send_cmd &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[bb]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[d3]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[d6]"></a>create_name</STRONG> (Thumb, 616 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[da]"></a>dir_alloc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[de]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[dd]"></a>dir_next</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[e3]"></a>dir_read</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[e5]"></a>dir_register</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[db]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[e8]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[102]"></a>follow_path</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[107]"></a>get_fileinfo</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[106]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[e0]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[e6]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[d9]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[dc]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[e4]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[104]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[103]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[df]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[105]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_fs &rArr; disk_ioctl &rArr; power_on &rArr; send_initial_clock_train &rArr; DESELECT
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[e1]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sync_window &rArr; disk_write &rArr; xmit_datablock &rArr; xmit_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[ff]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[87]"></a>InternalImageDraw</STRONG> (Thumb, 872 bytes, Stack size 112 bytes, image.o(i.InternalImageDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelTransparentDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrImageDraw
</UL>

<P><STRONG><a name="[91]"></a>PixelTransparentDraw</STRONG> (Thumb, 646 bytes, Stack size 80 bytes, image.o(i.PixelTransparentDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PixelTransparentDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalImageDraw
</UL>

<P><STRONG><a name="[83]"></a>UpdateContextCharMapping</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, string.o(i.UpdateContextCharMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateContextCharMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextFontSet
</UL>

<P><STRONG><a name="[ac]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a8]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[ae]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ad]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
